{"ast":null,"code":"var _jsxFileName = \"/Users/tungpham/Documents/GitHub/color-code-converter/src/components/ColorConverter.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ColorInput from \"./ColorInput\";\nimport ColorPreview from \"./ColorPreview\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ColorConverter = () => {\n  _s();\n  const [color, setColor] = useState(\"\");\n  const [convertedColor, setConvertedColor] = useState(\"\");\n  const hexToRgb = hex => {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? `rgb(${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)})` : null;\n  };\n  const rgbToHex = rgb => {\n    const result = rgb.match(/\\d+/g);\n    return result ? `#${result.map(x => parseInt(x).toString(16).padStart(2, \"0\")).join(\"\")}` : null;\n  };\n  const handleConvert = () => {\n    let result = \"\";\n    if (color.startsWith(\"#\")) {\n      result = hexToRgb(color);\n    } else if (color.startsWith(\"rgb\")) {\n      result = rgbToHex(color);\n    } else {\n      result = \"Invalid Format\";\n    }\n    setConvertedColor(result || \"Invalid Format\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center my-4\",\n      children: \"Color Code Converter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ColorInput, {\n      color: color,\n      setColor: setColor,\n      handleConvert: handleConvert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ColorPreview, {\n      convertedColor: convertedColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(ColorConverter, \"hn4l6ovbHUZLthk8MN/QEEeV/PA=\");\n_c = ColorConverter;\nexport default ColorConverter;\nvar _c;\n$RefreshReg$(_c, \"ColorConverter\");","map":{"version":3,"names":["React","useState","ColorInput","ColorPreview","jsxDEV","_jsxDEV","ColorConverter","_s","color","setColor","convertedColor","setConvertedColor","hexToRgb","hex","result","exec","parseInt","rgbToHex","rgb","match","map","x","toString","padStart","join","handleConvert","startsWith","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tungpham/Documents/GitHub/color-code-converter/src/components/ColorConverter.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport ColorInput from \"./ColorInput\";\nimport ColorPreview from \"./ColorPreview\";\n\nconst ColorConverter = () => {\n  const [color, setColor] = useState(\"\");\n  const [convertedColor, setConvertedColor] = useState(\"\");\n\n  const hexToRgb = (hex) => {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n      ? `rgb(${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(\n          result[3],\n          16\n        )})`\n      : null;\n  };\n\n  const rgbToHex = (rgb) => {\n    const result = rgb.match(/\\d+/g);\n    return result\n      ? `#${result\n          .map((x) => parseInt(x).toString(16).padStart(2, \"0\"))\n          .join(\"\")}`\n      : null;\n  };\n\n  const handleConvert = () => {\n    let result = \"\";\n    if (color.startsWith(\"#\")) {\n      result = hexToRgb(color);\n    } else if (color.startsWith(\"rgb\")) {\n      result = rgbToHex(color);\n    } else {\n      result = \"Invalid Format\";\n    }\n    setConvertedColor(result || \"Invalid Format\");\n  };\n\n  return (\n    <div>\n      <h2 className=\"text-center my-4\">Color Code Converter</h2>\n      <ColorInput\n        color={color}\n        setColor={setColor}\n        handleConvert={handleConvert}\n      />\n      <ColorPreview convertedColor={convertedColor} />\n    </div>\n  );\n};\n\nexport default ColorConverter;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAExD,MAAMW,QAAQ,GAAIC,GAAG,IAAK;IACxB,MAAMC,MAAM,GAAG,2CAA2C,CAACC,IAAI,CAACF,GAAG,CAAC;IACpE,OAAOC,MAAM,GACT,OAAOE,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAKE,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAKE,QAAQ,CACrEF,MAAM,CAAC,CAAC,CAAC,EACT,EACF,CAAC,GAAG,GACJ,IAAI;EACV,CAAC;EAED,MAAMG,QAAQ,GAAIC,GAAG,IAAK;IACxB,MAAMJ,MAAM,GAAGI,GAAG,CAACC,KAAK,CAAC,MAAM,CAAC;IAChC,OAAOL,MAAM,GACT,IAAIA,MAAM,CACPM,GAAG,CAAEC,CAAC,IAAKL,QAAQ,CAACK,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CACrDC,IAAI,CAAC,EAAE,CAAC,EAAE,GACb,IAAI;EACV,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAIX,MAAM,GAAG,EAAE;IACf,IAAIN,KAAK,CAACkB,UAAU,CAAC,GAAG,CAAC,EAAE;MACzBZ,MAAM,GAAGF,QAAQ,CAACJ,KAAK,CAAC;IAC1B,CAAC,MAAM,IAAIA,KAAK,CAACkB,UAAU,CAAC,KAAK,CAAC,EAAE;MAClCZ,MAAM,GAAGG,QAAQ,CAACT,KAAK,CAAC;IAC1B,CAAC,MAAM;MACLM,MAAM,GAAG,gBAAgB;IAC3B;IACAH,iBAAiB,CAACG,MAAM,IAAI,gBAAgB,CAAC;EAC/C,CAAC;EAED,oBACET,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAIuB,SAAS,EAAC,kBAAkB;MAAAD,QAAA,EAAC;IAAoB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1D3B,OAAA,CAACH,UAAU;MACTM,KAAK,EAAEA,KAAM;MACbC,QAAQ,EAAEA,QAAS;MACnBgB,aAAa,EAAEA;IAAc;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC,eACF3B,OAAA,CAACF,YAAY;MAACO,cAAc,EAAEA;IAAe;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEV,CAAC;AAACzB,EAAA,CA9CID,cAAc;AAAA2B,EAAA,GAAd3B,cAAc;AAgDpB,eAAeA,cAAc;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}